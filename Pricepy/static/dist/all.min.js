var app = angular.module("myApp", ["ngRoute", "ngSanitize", "ngCookies", "ngAnimate", "ngTouch", "ngYoutubeEmbed"]);

app.config(["$routeProvider", "$locationProvider", function ($routeProvider, $locationProvider) {
    var templateSourcePath = "static/src/app/templates/";
    $routeProvider
    .when("/", {
        templateUrl: templateSourcePath +"home.htm",
        controller: "homeController"
    })
    .when("/machines/:machineId", {
        templateUrl: templateSourcePath + "machinePage.htm",
        controller: "machineController",
        machineId: "machineId"
    })
    .when("/machines", {
        templateUrl: templateSourcePath + "machines.htm",
        controller: "machinesController"
    })
    .when("/arenda", {
        templateUrl: templateSourcePath + "arenda.htm",
        controller: "arendaController"
    })
    .when("/contact", {
        templateUrl: templateSourcePath + "contact.htm",
        controller: "contactController"
    })
    .when("/notFound", {
        templateUrl: templateSourcePath + "notFound.htm",
        controller: "notFoundController"
    })
    .otherwise("/notFound", {
        templateUrl: templateSourcePath + "notFound.htm",
        controller: "notFoundController"
    })

    $locationProvider.html5Mode(true);
}]);

app.controller("appController", ["$scope", "$location", "$http", "getData", "dateService", function($scope, $location, $http, getData, dateService){
    $scope.path = $location.path();

    getData.getContent("/api/Values", "header").then(function(data){
        $scope.data = {};
        $scope.data.header = data;
        console.log($scope.data);
        getData.getContent("/api/Values", "footer").then(function(data){
            $scope.data.footer = data;
            console.log($scope.data);
        });

        if ($scope.machines != null){
            //async get data for machines
            getData.getContent("/api/Values", "machines").then(function(data){
                console.log("[asynk] app machines loaded!");
                $scope.machines = data;
                console.log("machines in app:");
                console.log($scope.data);
            });
        }
    })
}])
app.controller('arendaController', ["$scope", "$location", "getData", function arendaController($scope, $location, getData){
    $scope.$parent.path = "/arenda";

    getData.getContent("/api/Values", "arenda").then(function(data){
        $scope.data = data;
        $scope.$parent.pageTitle = data.pageTitle;
        $scope.$parent.pageDescription = data.pageDescription;
    })
}])
app.controller('calendarController', ["$scope", "calendarService", function calendarController($scope, calendarService){
    console.log("calendar controller runs");
    $scope.bookedDates = $scope.$parent.machine.bookedDates;
    if ($scope.bookedDates){
        $scope.bookedDates = $scope.bookedDates.split(",");
    }
    console.log($scope.bookedDates);

    var fillCalendar = function(originalDate){
        var currDate = originalDate;
        console.log(currDate);
        var currDateStrig = currDate.toDateString();
        var firstDayOfCurrMonth = calendarService.getFirstDayOfMonth(currDateStrig);
        var numberOfDaysInCurrMonth = calendarService.getLastDayOfMonth(currDateStrig);
            
        $scope.arr= calendarService.getMonthArray(firstDayOfCurrMonth, numberOfDaysInCurrMonth);
    };

    var highlightDay = function(dateStr, propeptyName){
        var dd = new Date(dateStr);
        var day = dd.getDate();
        for(var rowIndex=0; rowIndex<$scope.arr.length; rowIndex++){
            for(var colIndex = 0; colIndex < $scope.arr[rowIndex].length; colIndex++){
                if ($scope.arr[rowIndex][colIndex].value == day){
                    $scope.arr[rowIndex][colIndex][propeptyName] = true;
                    break;
                }
            }
        }
        console.log($scope.arr);
    };

    var markBookedDates = function(){
        for(var i = 0; i< $scope.bookedDates.length; i++){
            var dd = new Date($scope.bookedDates[i]);
            if (dd.getMonth() == currentDay.getMonth() && dd.getFullYear() == currentDay.getFullYear()){
                //mark only if not expired
                if (!calendarService.isDatePast(today.toDateString(), $scope.bookedDates[i])){
                    highlightDay($scope.bookedDates[i], "booked");
                }
            }
        };
    };

    var today = new Date();
    var currentDay = new Date();
    $scope.monthTitle = calendarService.getMonthAndYearStr(currentDay.toDateString());
    fillCalendar(currentDay);
    highlightDay(today.toDateString(), "today");
    markBookedDates();

    $scope.nextMonth = function(){
        currentDay = calendarService.increaseMonth(currentDay);
        $scope.monthTitle = calendarService.getMonthAndYearStr(currentDay.toDateString());
        fillCalendar(currentDay);
        if (today.getMonth() == currentDay.getMonth() && today.getFullYear() == currentDay.getFullYear()){
            highlightDay(today.toDateString(), "today");
        };
        markBookedDates();
    };

    $scope.prevMonth = function(){
        currentDay = calendarService.decreaseMonth(currentDay);
        $scope.monthTitle = calendarService.getMonthAndYearStr(currentDay.toDateString());
        fillCalendar(currentDay);
        if (today.getMonth() == currentDay.getMonth() && today.getFullYear() == currentDay.getFullYear()){
            highlightDay(today.toDateString(), "today");
        };
        markBookedDates();
    };
}])
app.controller('contactController', ["$scope", "$http", "getData", function contactController($scope, $http, getData){
    $scope.$parent.path = "/contact";

    getData.getContent("/api/Values", "contacts").then(function(data){
        $scope.data = data;
        $scope.$parent.pageTitle = data.pageTitle;
        $scope.$parent.pageDescription = data.pageDescription;
        //console.log($scope.data);

        $scope.isSucceeded = false;
        $scope.isError = false;
        $scope.submit = function(){
            if ($scope.messagesForm.$invalid){
                return;
            }
            $http({
                method: 'POST',
                url: '/api/Messages',
                data: $scope.form,
            }).then(function successCallback(response) {
                //console.log(response);
                if (response.data){
                    $scope.isSucceeded = true;
                }
                else{
                    $scope.isError = true;
                }
            }, function errorCallback(response) {
                $scope.isError = true;
            });
        };
    })
}])
app.controller('homeController', ["$scope", "$location", "getData", "dateService", function homeController($scope, $location, getData, dateService){
    console.log("home controller runs");
    $scope.$parent.path = "/";
    $scope.showSlides = false;

    getData.getContent("/api/Values", "home").then(function(data){
        $scope.data = data;
        $scope.$parent.pageTitle = data.pageTitle;
        $scope.$parent.pageDescription = data.pageDescription;
        $scope.isDisplayAction = data.action != null && !dateService.isExpired(data.action.finishDateTime);
        // $scope.slides = [];
        // $scope.
        $scope.showSlides = true;
    })
}])
app.controller('machineController', ["$scope", "$routeParams", "$location", "getData", "filterService", "cookiesService", function machineController($scope, $routeParams, $location, getData, filterService, cookiesService){
    console.log("single machine controller runs");
    $scope.$parent.path = "/machines";

    $scope.machineName = $routeParams.machineId;

    $scope.categories = cookiesService.getObject("categories", {
        CategoryB: true,
        CategoryE: true
    });

    $scope.availibilityFilterValue = cookiesService.getObject("availibilityFilterValue", {
        useFilter: false
    });

    getData.getContent("/api/Values", "machine").then(function(data){
        $scope.data = data;
        console.log("content loaded");
        var pageTitle = data.pageTitle;

        if ($scope.$parent.machines){
            var data = $scope.$parent.machines;
            $scope.machines = data;
            $scope.machine = {};
            //reset visibility;
            var isFound = false;
            $scope.machines.gallery.items.map(function(a){
                a.isVisible = true;
                if (a.name == $scope.machineName){
                    $scope.machine = a;
                    $scope.index = a.id;
                    isFound = true;
                }
            });
            //redirect to 1st if not found
            if (!isFound){
                $location.url($scope.machines.gallery.items[0].href)
            }
            $scope.machine.priceLabel = data.gallery.priceLabel;
            $scope.machines.gallery.items[$scope.index-1].isVisible = false;
            $scope.isShowSecondaryImages = $scope.machine.secondaryImages.length > 1;
            $scope.$parent.pageTitle = $scope.machine.description + " " + pageTitle;
            $scope.$parent.pageDescription = $scope.machine.description + " " + data.gallery.priceLabel + " " + $scope.machine.price;

            //first item active by default
            $scope.activeImg = $scope.machine.secondaryImages[0];
            $scope.contentLoaded = true;
        }
        else{
            getData.getContent("/api/Values", "machines").then(function(data){
                $scope.$parent.machines = data;

                $scope.machines = data;
                $scope.machine = {};
                var isFound = false;
                $scope.machines.gallery.items.map(function(a){
                    if (a.name == $scope.machineName){
                        $scope.machine = a;
                        $scope.index = a.id;
                        isFound = true;
                    }
                });
                //redirect to 1st if not found
                if (!isFound){
                    $location.url($scope.machines.gallery.items[0].href)
                }
                $scope.machine.priceLabel = data.gallery.priceLabel;
                $scope.machines.gallery.items[$scope.index-1].isVisible = false;
                $scope.isShowSecondaryImages = $scope.machine.secondaryImages.length > 1;
                $scope.$parent.pageTitle = $scope.machine.description + " " + pageTitle;
                $scope.$parent.pageDescription = $scope.machine.description + " " + data.gallery.priceLabel + " " + $scope.machine.price;

                //first item active by default
                $scope.activeImg = $scope.machine.secondaryImages[0];
                $scope.contentLoaded = true;
            });
        }
    });

    $scope.setActive = function(image){
        $scope.activeImg = image;
    };

    $scope.setPreviousImageActive = function(){
        for(var i = 0; i< $scope.machine.secondaryImages.length; i++){
            var item = $scope.machine.secondaryImages[i];
            if (item.img.imgSrc == $scope.activeImg.img.imgSrc){
                if (i != 0){
                    $scope.setActive($scope.machine.secondaryImages[i-1]);
                    break;
                }
            }            
        }
    };

    $scope.setNextImageActive = function(){
        for(var i = 0; i< $scope.machine.secondaryImages.length; i++){
            var item = $scope.machine.secondaryImages[i];
            if (item.img.imgSrc == $scope.activeImg.img.imgSrc){
                if (i != $scope.machine.secondaryImages.length-1){
                    console.log(i);
                    $scope.setActive($scope.machine.secondaryImages[i+1]);
                    break;
                }
            }            
        }
    };

    $scope.gotoPage = function(page){
        $location.url(page);
    };

    $scope.saveCategoryFilter = function(){
        cookiesService.saveObject("categories", $scope.categories);
    };

    $scope.saveAvailibilityFilterValue = function(){
        cookiesService.saveObject("availibilityFilterValue", $scope.availibilityFilterValue);
    };

    $scope.categoryFilter = filterService.categoryFilter;
    $scope.availibilityFilter = filterService.availibilityFilter;
}])
app.controller('machinesController', ["$scope", "getData", "dateService", "filterService", "cookiesService", function machinesController($scope, getData, dateService, filterService, cookiesService){
    $scope.$parent.path = "/machines";

    $scope.categories = cookiesService.getObject("categories", {
        CategoryB: true,
        CategoryE: true
    });

    $scope.availibilityFilterValue = cookiesService.getObject("availibilityFilterValue", {
        useFilter: false
    });

    if ($scope.$parent.machines){
        var data = $scope.$parent.machines;
        $scope.data = data;
        //reset visibility;
        $scope.data.gallery.items.map(function(a){
            a.isVisible = true;

            //checkAvailibility
            //if selected date is expired - set avalibility to true
            if (a.availibility == false){
                if (a.availibilityDate){
                    if (dateService.isExpired(a.availibilityDate)){
                        a.availibility = true;
                        a.availibilityLabel = $scope.data.gallery.availibilityTrueLabel;
                    }
                }
            }
        });
        $scope.$parent.pageTitle = data.pageTitle;
        $scope.$parent.pageDescription = data.pageDescription;
    }
    else{
        getData.getContent("/api/Values", "machines").then(function(data){
            $scope.$parent.machines = data;
            
            $scope.data = data;

            $scope.data.gallery.items.map(function(a){
                //checkAvailibility
                //if selected date is expired - set avalibility to true
                if (a.availibility == false){
                    if (a.availibilityDate){
                        if (dateService.isExpired(a.availibilityDate)){
                            a.availibility = true;
                            a.availibilityLabel = $scope.data.gallery.availibilityTrueLabel;
                        }
                    }
                }
            });
            $scope.$parent.pageTitle = data.pageTitle;
            $scope.$parent.pageDescription = data.pageDescription;
        })
    };

    $scope.saveCategoryFilter = function(){
        cookiesService.saveObject("categories", $scope.categories);
    };

    $scope.saveAvailibilityFilterValue = function(){
        cookiesService.saveObject("availibilityFilterValue", $scope.availibilityFilterValue);
    };

    $scope.categoryFilter = filterService.categoryFilter;

    $scope.availibilityFilter = filterService.availibilityFilter;
}])
app.controller('notFoundController', ["$scope", "getData", function notFoundController($scope, getData){
    //console.log("NotFound controller runs");

    getData.getContent("/api/Values", "notFound").then(function(data){
        $scope.data = data;
        $scope.$parent.pageTitle = data.pageTitle;
        $scope.$parent.pageDescription = data.pageDescription;
        //console.log($scope.data);
    })
}])
app.controller('scrollToAnchorController', ["$scope", "anchorSmoothScroll", function($scope, anchorSmoothScroll) {
    $scope.gotoElement = function (eID){
      anchorSmoothScroll.scrollTo(eID);
    };
}]);
app.controller('sliderController', ["$scope", "$location", "getData", "dateService", function sliderController($scope, $location, getData, dateService){
    console.log("slider controller runs");
    $scope.banners = $scope.$parent.data.banners;
}])
app.controller('timerController',['$scope', "$interval", function timerController($scope, $interval){
    console.log("timer controlelr runs");

    $scope.hoursLeft = "zero h";
    $scope.minutesLeft = "zero m";
    $scope.secondsLeft = "zero s";
    
    var finishstr = $scope.$parent.banner.finishDateTime;
    var timeInterval = $interval(function(){
        $scope.temp = "updated";
        console.log("<<inside time interval>>");
        var t = getTimeRemaining(finishstr);
        $scope.hoursLeft = t.hours;
        $scope.minutesLeft = t.minutes;
        $scope.secondsLeft = t.seconds;

        if (t.total <= 0){
            clearInterval(timeInterval);
        }
    }, 1000);

    var getTimeRemaining = function (endtime){
        var t = Date.parse(endtime) - Date.parse(new Date());
        var seconds = Math.floor( (t/1000) % 60 );
        var minutes = Math.floor( (t/1000/60) % 60 );
        var hours = Math.floor( (t/(1000*60*60)) % 24 );
        var days = Math.floor( t/(1000*60*60*24) );
        return {
          'total': t,
          'days': days,
          'hours': hours,
          'minutes': minutes,
          'seconds': seconds
        };
      }
}])
app.controller('toggleMenuController', ["$scope", "$rootScope", "$window", function($scope, $rootScope, $window) {
  //console.log("toggle controller runs");

  $scope.isMobile = $window.innerWidth < 768;
  //console.log("is mobile");
  //console.log($scope.isMobile);
  $scope.isOpen = !$scope.isMobile;
  //console.log($window.innerWidth);

  //console.log($scope.isOpen);

  $scope.toggleMenu = function(){
    $scope.isOpen = !$scope.isOpen;
  }

  $rootScope.$on( "$routeChangeStart", function(event, next, current) {
    $scope.isMobile = $window.innerWidth < 768;
      $scope.isOpen = !$scope.isMobile;
    });
}]);
app.directive("matchHeight", ["$timeout", "$window", function($timeout, $window){
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            scope.matchHeight = function(){
                $timeout(function(){
                    var images = element[0].getElementsByClassName('item-img');
                    if (attrs.matchHeight == "toLarger"){
                        var max = 1;
                        for(var i = 0; i< images.length; i++){
                            images[i].style.height = 'auto';
                            var height = images[i].height;

                            //if height property not defined
                            if (height == undefined){
                                height = images[i].clientHeight;
                            }
                            //if img hasn't been loaded yet
                            if (height == 0){
                                height = 200;
                            }
                            if (height > max){
                                max = height;
                            };
                        };
                    }
                    else{
                        //to smallest
                        var max = 1000;
                        for(var i = 0; i< images.length; i++){
                            images[i].style.height = 'auto';
                            var height = images[i].height;

                            //if height property not defined
                            if (height == undefined){
                                height = images[i].clientHeight;
                            }
                            //if img hasn't been loaded yet
                            if (height == 0){
                                height = 200;
                            }
                            if (height < max){
                                max = height;
                            };
                        };
                    }
                    for(var i = 0; i< images.length; i++){
                        images[i].style.height = max + "px";
                    };
                },900);
            };
            scope.matchHeight();
            angular.element($window).bind('resize', function() {
                scope.matchHeight();
            })
        }
    }
}]);
app.directive("setMap", ["$timeout", function($timeout){
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            var map;
            function initMap() {
                //old address
                //var myLatLng = {lat: 53.7782142, lng: 27.5949404};

                //new address Minsk Vulica Karzhaneyewskaha 16b
                var myLatLng = {lat: 53.841885, lng: 27.524684};

                var map = new google.maps.Map(element[0], {
                    zoom: 14,
                    center: myLatLng
                });

                var marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                });
            };

            $timeout(function(){
                initMap();
            }, 500)
        }
    }
}]);
app.directive('showWhen', ['$window', function ($window) {
    return {
        restrict: 'A',
        link: function ($scope, $element, $attr) {

            $scope.checkExpose = function () {
                var mq = $attr.showWhen == 'large' ? '(min-width:768px)' : $attr.showWhen;
                if ($window.matchMedia(mq).matches) {
                    $element.removeClass('ng-hide');
                } else {
                    console.log("add");
                    $element.addClass('ng-hide');
                }
            };

            $scope.checkExpose();

            angular.element($window).bind('resize', function () {
                $scope.checkExpose();
            })

        }
    };
}]);
app.filter('addLeadingZero', function () {
    return function(input) {
        if (input < 10){
            return "0" + input;
        }
        return input;
    };
});
app.service('anchorSmoothScroll', function(){
    
    this.scrollTo = function(eID) {
        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for ( var i=startY; i<stopY; i+=step ) {
                setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for ( var i=startY; i>stopY; i-=step ) {
            setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }
        
        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }
        
        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }
    };
});
app.service('calendarService', function(){
    var emptyPlaceholder = "";
    var locale = "ru-ru";
    var options = {month: "long", year: "numeric"};

    return {
        getFirstDayOfMonth: function(dateStr){
            var dd = new Date(dateStr);
            dd.setDate(1);
            var weekDay = dd.getDay();
            //0 is for Sunday
            if (weekDay == 0){
                return 7;
            }
            return dd.getDay()
        },

        getLastDayOfMonth: function(dateStr){
            var dd = new Date(dateStr);

            //0 as day means previous month last day
            var cc = new Date(dd.getFullYear(), dd.getMonth()+1, 0);
            return cc.getDate();
        },

        isDatePast: function(originalDateStr, secondDateStr){
            var d1 = new Date(originalDateStr);
            d1.setHours(0,0,0,0);
            var d2 = new Date(secondDateStr);

            return d2 < d1;
        },

        getMonthAndYearStr: function(dateStr){
            var d = new Date(dateStr);
            return d.toLocaleDateString(locale, options);
        },

        increaseMonth: function(date){
            var month = date.getMonth();
            if (month == 11){
                date.setFullYear(date.getFullYear()+1);
                date.setMonth(0);
            }
            else{
                date.setMonth(date.getMonth()+1);
            }
            return date;
        },

        decreaseMonth: function(date){
            var month = date.getMonth();
            if (month == 0){
                date.setFullYear(date.getFullYear()-1);
                date.setMonth(11);
            }
            else{
                date.setMonth(date.getMonth()-1);
            }
            return date;
        },

        getMonthArray: function(firstDayOfMonth, numberofDaysInMonths){
            var index = 1;
            var exitRows = false;
            var arr = [];
            for (var rowNumber = 0; rowNumber <= 5; rowNumber++){
                if (!exitRows && index <= numberofDaysInMonths){
                    arr.push([]);
                    for (var colNumber = 0; colNumber <= 6; colNumber++){
                        if (rowNumber == 0 && colNumber+ 1 < firstDayOfMonth){
                            arr[rowNumber][colNumber] = {value: emptyPlaceholder};
                        }
                        else{
                            if (index > numberofDaysInMonths){
                                arr[rowNumber][colNumber] = {value:emptyPlaceholder};
                                exitRows = true;
                            }
                            else{
                                arr[rowNumber][colNumber] = {value: index};
                                index++;
                            }
                        }
                    }
                }
            };
            return arr;
        }
    }
});
app.service('cookiesService', ['$cookies', function($cookies){
    return {
        saveObject: function(key, value){
            var today = new Date();
            today.setHours(today.getHours() + 1);

            $cookies.put(key, JSON.stringify(value), {expires: today});
        },

        getObject: function(key, defaultValue){
            var cookieValue = $cookies.get(key);
            if (cookieValue){
                return JSON.parse(cookieValue);
            }
            else{
                return defaultValue;
            }
        }
    }
}
])
app.service('dateService', function(){
        return {
            isExpired: function(stringDateToCompare){
                if (stringDateToCompare){
                    var now = new Date();
                    var date = new Date(stringDateToCompare);
                    return now > date;
                }
                return null;
            }
    }
});
app.service("filterService", [ 'textConstantService', function(textConstantService){
    return {
        categoryFilter: function(categories){

            return function(item){
                if (!categories.CategoryB){
                    if (item.fullInfo["category"] == textConstantService.categories.categoryB){
                        return;
                    }
                }
                if(!categories.CategoryE){
                    if (item.fullInfo["category"] == textConstantService.categories.categoryE){
                        return;
                    }
                }
                return item;
            }
        },

        availibilityFilter: function(useFilter){
            return function(item){
                if (useFilter){
                    if (item.availibility){
                        return item;
                    }
                }
                else{
                    return item;
                }
            }
        }
    }
}
])
app.service("getData", ['$http',function($http){
    return {
            getContent: function (url, sectionName) {
                var promise = $http({
                    method: 'Get',
                    url: url,
                    params: {sectionName: sectionName}, 
                }).then(function successCallback(response) {
                    return response.data;
                }, function errorCallback(response) {
                    console.log("error");
                });

                return promise;
            }
        }
    }
]);
app.value('textConstantService', {
    categories: {
        categoryB: "Категория B",
        categoryE: "Категория E"
    },
    available:{
        trueValue: "true"
    }
})