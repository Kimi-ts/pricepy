var adminApp = angular.module("adminApp", ["ngRoute", "ngSanitize", "ngCookies", "ngAnimate", "720kb.datepicker"]);

adminApp.config(["$routeProvider", function ($routeProvider) {
    var templateSourcePath = "static/src/admin/templates/";
    $routeProvider
    .when("/", {
        templateUrl: templateSourcePath + "signin.htm",
        controller: "signinController"
    })
    .when("/gallery", {
        templateUrl: templateSourcePath + "gallery.htm",
        controller: "galleryController"
    })
    .when("/news", {
        templateUrl: templateSourcePath + "news.htm",
        controller: "newsController"
    })
    .when("/actions", {
        templateUrl: templateSourcePath + "actions.htm",
        controller: "actionsController"
    })
}]);

adminApp.controller("adminController", ["$scope", "$location", "$http", "getData", "dateService", function ($scope, $location, $http, getData, dateService) {
    $scope.path = $location.path();
    console.log("hello from Admin");

    getData.getContent("/api/Values", "header").then(function(data){
        $scope.data = {};
        $scope.data.header = data;
        console.log($scope.data);
        getData.getContent("/api/Values", "footer").then(function(data){
            $scope.data.footer = data;
            console.log($scope.data);
        })
    });
}])
adminApp.controller('actionsController', ['$scope', '$http', '$location', '$cookies', '$timeout', 'getData', 'postData', 'myVars', function actionsController($scope, $http, $location, $cookies, $timeout, getData, postData, myVars){
    console.log("actions controller runs");
    $scope.$parent.path = "/actions";
    $scope.isDataUpdated = false;

    getData.getContent("/api/Values", "home").then(function(data){
        console.log(data);
        $scope.data = data;
    });

    $scope.postToServer = function(){
        if ($scope.bannersForm.$invalid || $scope.bannersForm.$pristine){
                return;
        };

        $scope.isHiglightFirstNewsItem = false;
        $scope.isDataUpdated = false;
        $scope.isError = false;

        //NOTE: use two stringify methods to wrap object first into "" and second '' 
        //to be accepted by [post] method in Web Api
        var dataToSend = JSON.stringify(JSON.stringify($scope.data.banners));

        postData.postContent('/api/Banners', dataToSend).then(function(response) {
            if (!response.isError && response.data){
                toggleVariableBlinking("isDataUpdated");
                $scope.isError = false;
            }
            else{
                toggleVariableBlinking("isError");
            }
        });
    };

    $scope.removeItem = function(indexToRemove){
        $scope.data.banners.splice(indexToRemove, 1);
        $scope.bannersForm.$setDirty();
    }

    var toggleVariableBlinking = function(variableName){
        $scope[variableName] = true;
        $timeout(function(){
            $scope[variableName] = false;
        }, 4000)
    }
}]);
adminApp.controller('galleryController', [ '$scope', '$location', '$timeout', 'getData', 'postData', 'dateService', function galleryController($scope, $location, $timeout, getData, postData, dateService){
        console.log("gallery controller runs");
        $scope.$parent.path = "/gallery";

        $scope.isDataUpdated = false;
        getData.getContent("/api/AdminValues", "adminGallery").then(function(data){
            console.log(data);
            $scope.data = data;
            getData.getContent("/api/AdminValues", "machines").then(function(data){
                console.log(data);
                if (data == null){
                    $location.path("/");
                }
                else{
                    $scope.machines = data;
                }
            });
        });

        $scope.clearAvailibilityTextBox = function(item){
            item.availibilityLabel = "";
            item.availibilityDate = null;
        };

        $scope.editFullInfo = function(item){
            $scope.isDisplayFullInfoPanel = true;
            $scope.activeItem = item;
        };

        $scope.addNewPriceRow = function(){
            var newItem = {name: "", value: ""};
            $scope.activeItem.fullInfo.prices.push(newItem);
        };

        $scope.removePriceRow = function(indexToRemove){
            $scope.activeItem.fullInfo.prices.splice(indexToRemove, 1);
            $scope.fullInfoForm.$setDirty();
        };

        $scope.isExpired = function(dateToCompare){
            //return dateToCompare && dateService.isExpired(dateToCompare);
            return dateService.isExpired(dateToCompare);
        };

        $scope.save = function(){
            console.log("save called");
            if (($scope.galleryForm.$invalid || $scope.galleryForm.$pristine) && ($scope.fullInfoForm.$invalid || $scope.fullInfoForm.$pristine)){
                    return;
            };
            
            $scope.updatedMachines = [];
            //TO DO
            //Check only updated values, not all
            for(var i = 0; i< $scope.machines.gallery.items.length; i++){
                var newMachine = {};
                var item = $scope.machines.gallery.items[i];
                newMachine.Name = item.name;
                newMachine.IsAvailable = item.availibility;
                newMachine.AvailibilityLabel = item.availibilityLabel;
                newMachine.AvailibilityDate = item.availibilityDate;
                newMachine.IsDiscount = item.discount;
                newMachine.IsSuperAction = item.isSuperAction;
                newMachine.Price = item.price;
                newMachine.BookedDates = item.bookedDates;
                newMachine.FullInfo = JSON.stringify(item.fullInfo);
                $scope.updatedMachines.push(newMachine);
            };

            console.log("short collection:");
            console.log($scope.updatedMachines);

            postData.postContent('/api/Gallery', $scope.updatedMachines).then(function(response) {
                if (!response.isError && response.data){
                    toggleVariableBlinking("isDataUpdated");
                    $scope.isError = false;
                }
                else{
                    $scope.isError = true;
                }
            });
        };

        var toggleVariableBlinking = function(variableName){
            $scope[variableName] = true;
            $timeout(function(){
                $scope[variableName] = false;
            }, 4000)
        }
    }
])
adminApp.controller('newsController', [ '$scope', '$location', 'getData', 'postData', '$timeout', function newsController($scope, $location, getData, postData, $timeout){
        console.log("news controller runs");
        $scope.$parent.path = "/news";
        $scope.isDataUpdated = false;
        $scope.videoUrl = "";
        $scope.isShowInstructions = false;

        getData.getContent("/api/Values", "home").then(function(data){
            console.log(data);
            $scope.data = data;
        });

        $scope.postToServer = function(){
            if ($scope.newsForm.$invalid || $scope.newsForm.$pristine){
                    return;
            };

            $scope.isHiglightFirstNewsItem = false;
            $scope.isDataUpdated = false;
            $scope.isError = false;
            $scope.isImageUploadError = false;

            //NOTE: use two stringify methods to wrap object first into "" and second '' 
            //to be accepted by [post] method in Web Api
            var dataToSend = JSON.stringify(JSON.stringify($scope.data.sections));

            //postData.postContent('/api/News', dataToSend, {"Content-Type": 'application/x-www-form-urlencoded'}).then(function(response) {
            postData.postContent('/api/News', dataToSend).then(function(response) {
                if (!response.isError && response.data){
                    toggleVariableBlinking("isDataUpdated");
                    $scope.isError = false;
                }
                else{
                    toggleVariableBlinking("isError");
                }
            });
        };

        $scope.postImage = function(){
            if ($scope.imageForm.$invalid || $scope.imageForm.$pristine && $scope.myFile){
                postData.postFile('/api/Image', $scope.myFile).then(function(response) {
                    if (!response.isError && response.data){
                        if (response.data.Message){
                            $scope.isImageUploadError = false;
                            var newSection = {};
                            newSection.img = {};
                            newSection.img.imgSrc = response.data.Message;
                            newSection.textHtml = "<h3 class='textBlock-subheadline'>Заголовок новости</h3><p>Текст новости</p><p class='textBlock-text--italic'>Big Trailler - самые надёжные прицепы твоего города!</p>";

                            //push the new one at the beginning of the list
                            $scope.data.sections.splice(0, 0, newSection);
                            $scope.isHiglightFirstNewsItem = true;
                        }
                    }
                    else{
                        toggleVariableBlinking("isImageUploadError");
                        console.log(response);
                    }
                });
            }
        };

        $scope.postVideo = function()
        {
            if ($scope.videoUrl){
                var newSection = {};
                newSection.video = {};
                newSection.video.url = $scope.videoUrl; 
                newSection.textHtml = "<h3 class='textBlock-subheadline'>Заголовок новости</h3><p>Текст новости</p><p class='textBlock-text--italic'>Big Trailler - самые надёжные прицепы твоего города!</p>";

                //push the new one at the beginning of the list
                $scope.data.sections.splice(0, 0, newSection);
                $scope.isHiglightFirstNewsItem = true;
                $scope.videoUrl = "";
            }
        }

        $scope.removeItem = function(indexToRemove){
            $scope.data.sections.splice(indexToRemove, 1);
            $scope.newsForm.$setDirty();
        }

        $scope.toggleInstructionVisibility = function(){
            $scope.isShowInstructions = !$scope.isShowInstructions;
        }

        var toggleVariableBlinking = function(variableName){
            $scope[variableName] = true;
            $timeout(function(){
                $scope[variableName] = false;
            }, 4000)
        }
    }
])
adminApp.controller('scrollToAnchorController', ["$scope", "anchorSmoothScroll", function($scope, anchorSmoothScroll) {
    $scope.gotoElement = function (eID){
      anchorSmoothScroll.scrollTo(eID);
    };
}]);
adminApp.controller('signinController', ['$scope', '$http', '$location', '$cookies', 'getData', 'postData', 'myVars', function signinController($scope, $http, $location, $cookies, getData, postData, myVars){
    console.log("sign in controller runs");
    $scope.$parent.path = "/sign in";
    
    $scope.isError = false;

    getData.getContent("/api/Values", "signin").then(function(data){
        $scope.data = data;
        console.log($scope.data);

        $scope.submit = function(){
            if ($scope.messagesForm.$invalid){
                return;
            };

            postData.postContent('/api/AdminValues', $scope.form).then(function (response) {
                if (!response.isError && response.data){
                    $scope.isError = false;
                    myVars.tokenValue = response.data.Value;
                    $cookies.put('X-Token', myVars.tokenValue);
                    $location.path("/gallery")
                }
                else{
                    $scope.isError = true;
                    console.log("error occured on our server");
                    console.log(response);
                }
            });
        };
    })
}
]);
adminApp.directive('clearFileInput', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.on("submit", function(){
                var fileInput = document.getElementsByName(attrs.clearFileInput)[0];
                angular.element(fileInput).val(null);
                angular.element(fileInput).triggerHandler('change');

                return false;
            })
        }
    };
});
adminApp.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}]);
adminApp.service('anchorSmoothScroll', function(){
    
    this.scrollTo = function(eID) {
        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for ( var i=startY; i<stopY; i+=step ) {
                setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for ( var i=startY; i>stopY; i-=step ) {
            setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }
        
        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }
        
        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }
    };
});
adminApp.service('dateService', function(){
        return {
            isExpired: function(stringDateToCompare){
                if (stringDateToCompare){
                    var now = new Date();
                    var date = new Date(stringDateToCompare);
                    return now > date;
                }
                return null;
            }
    }
});
adminApp.service("getData", ['$http', '$cookies', 'myVars',function($http, $cookies, myVars){
    return {
            getContent: function (url, sectionName) {
            //console.log(TokenValue);
            var tokenValue = myVars.tokenValue;
            console.log("token value inside GETDATA service:");
            console.log(tokenValue);
            if (!tokenValue){
                tokenValue = $cookies.get("X-Token");
            }
            console.log("X-token");
            console.log(tokenValue);
            var promise = $http({
                method: 'Get',
                url: url,
                params: {
                    sectionName: sectionName
                },
                headers: {
                    "X-Token": tokenValue
                }
            }).then(function successCallback(response) {
                return response.data;
            }, function errorCallback(response) {
                console.log("error");
            });

            return promise;
            }
        }
    }
]);
adminApp.service("postData", ['$http', '$cookies', 'myVars',function($http, $cookies, myVars){

    var setDefaultHeaders = function(headers){
        var tokenValue = myVars.tokenValue;
        if (!tokenValue){
            tokenValue = $cookies.get("X-Token");
        };

        if (headers){
            headers["X-Token"] = tokenValue;
        }
        else{
            headers = {"X-Token": tokenValue};
        };
        return headers;
    };

    return {
        postContent: function (url, dataToPost, headers) {
                var promise = $http({
                    method: 'POST',
                    url: url,
                    data: dataToPost,
                    headers: setDefaultHeaders(headers)
                }).then(function successCallback(response) {
                    return response;
                }, function errorCallback(response) {
                    response.isError = true;
                    return response;
                });

                return promise;
            },

        postFile: function(url, fileToPost, headers){
                var fd = new FormData();
                fd.append('file', fileToPost);

                //set special header for transfering a file
                if (headers){
                    headers["Content-Type"] = undefined;
                }
                else{
                    headers = {"Content-Type": undefined};
                }

                var promise = $http({
                    method: 'POST',
                    url: url,
                    data: fd,
                    transformRequest: angular.identity,
                    headers: setDefaultHeaders(headers)
                }).then(function successCallback(response) {
                    return response;
                }, function errorCallback(response) {
                    response.isError = true;
                    return response;
                });

                return promise;
            }
        }
    }
]);
adminApp.value('myVars', {
    tokenValue: null
});